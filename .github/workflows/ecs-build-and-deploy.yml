name: Build and Deploy ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_WEBAPP: 780614560979.dkr.ecr.us-east-1.amazonaws.com/webapp
  ECR_OLLAMA: 780614560979.dkr.ecr.us-east-1.amazonaws.com/ollama
  ECS_CLUSTER: my-ecs-cluster
  ECS_SERVICE_WEBAPP: webapp-service
  ECS_SERVICE_OLLAMA: ollama-service
  TASK_FAMILY_WEBAPP: webapp-task
  TASK_FAMILY_OLLAMA: ollama-task

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token : ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check changed directories
        id: changes
        run: |
          echo "Checking for changes in webapp and ollama folders"
          echo "WEBAPP_CHANGED=false" >> $GITHUB_ENV
          echo "OLLAMA_CHANGED=false" >> $GITHUB_ENV

          # Check with the last commit
          WEBAPP_DIFF=$(git diff --name-only HEAD^ -- webapp/ | wc -l)
          OLLAMA_DIFF=$(git diff --name-only HEAD^ -- ollama/ | wc -l)

          if [ "$WEBAPP_DIFF" -gt 0 ]; then
            echo "WEBAPP_CHANGED=true" >> $GITHUB_ENV
          fi

          if [ "$OLLAMA_DIFF" -gt 0 ]; then
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
          fi

          echo "webapp changed? $WEBAPP_DIFF files"
          echo "ollama changed? $OLLAMA_DIFF files"

      - name: Login to Amazon ECR
        if: env.WEBAPP_CHANGED == 'true' || env.OLLAMA_CHANGED == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push webapp image
        if: env.WEBAPP_CHANGED == 'true'
        run: |
          echo "Building and pushing webapp image"
          docker build -t $ECR_WEBAPP:latest ./webapp
          docker push $ECR_WEBAPP:latest

      - name: Build and push ollama image
        if: env.OLLAMA_CHANGED == 'true'
        run: |
          echo "Building and pushing ollama image"
          docker build -t $ECR_OLLAMA:latest ./ollama
          docker push $ECR_OLLAMA:latest

      - name: Update ECS task definition and service - Webapp
        if: env.WEBAPP_CHANGED == 'true'
        run: |
          echo "Updating task definition and service for WEBAPP..."

          aws ecs describe-task-definition --task-definition $TASK_FAMILY_WEBAPP | jq '.taskDefinition' > taskdef-webapp.json

          jq --arg IMAGE "$ECR_WEBAPP:latest" '.containerDefinitions |= map(if .name=="webapp" then .image=$IMAGE else . end)' taskdef-webapp.json > taskdef-updated.json
          mv taskdef-updated.json taskdef-webapp.json

          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' taskdef-webapp.json > new-taskdef-webapp.json

          aws ecs register-task-definition --cli-input-json file://new-taskdef-webapp.json

          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY_WEBAPP --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE_WEBAPP --task-definition $NEW_TASK_DEF_ARN
          
          echo "✅ Service WEBAPP updated."

      - name: Update ECS task definition and service - Ollama
        if: env.OLLAMA_CHANGED == 'true'
        run: |
          echo "Updating task definition and service for OLLAMA..."

          aws ecs describe-task-definition --task-definition $TASK_FAMILY_OLLAMA | jq '.taskDefinition' > taskdef-ollama.json

          jq --arg IMAGE "$ECR_OLLAMA:latest" '.containerDefinitions |= map(if .name=="ollama" then .image=$IMAGE else . end)' taskdef-ollama.json > taskdef-updated.json
          mv taskdef-updated.json taskdef-ollama.json

          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' taskdef-ollama.json > new-taskdef-ollama.json

          aws ecs register-task-definition --cli-input-json file://new-taskdef-ollama.json

          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY_OLLAMA --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE_OLLAMA --task-definition $NEW_TASK_DEF_ARN

          echo "✅ Service OLLAMA updated."
      
