name: Build and Deploy ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_WEBAPP: 780614560979.dkr.ecr.us-east-1.amazonaws.com/webapp
  ECR_OLLAMA: 780614560979.dkr.ecr.us-east-1.amazonaws.com/ollama
  ECS_CLUSTER: my-ecs-cluster
  ECS_SERVICE: webapp-ollama-service
  TASK_FAMILY: webapp-ollama-task

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token : ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check changed directories
        id: changes
        run: |
          echo "Checking for changes in webapp and ollama folders"
          echo "WEBAPP_CHANGED=false" >> $GITHUB_ENV
          echo "OLLAMA_CHANGED=false" >> $GITHUB_ENV

          # Check with the last commit
          WEBAPP_DIFF=$(git diff --name-only HEAD^ -- webapp/ | wc -l)
          OLLAMA_DIFF=$(git diff --name-only HEAD^ -- ollama/ | wc -l)

          if [ "$WEBAPP_DIFF" -gt 0 ]; then
            echo "WEBAPP_CHANGED=true" >> $GITHUB_ENV
          fi

          if [ "$OLLAMA_DIFF" -gt 0 ]; then
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
          fi

          echo "webapp changed? $WEBAPP_DIFF files"
          echo "ollama changed? $OLLAMA_DIFF files"

      - name: Login to Amazon ECR
        if: env.WEBAPP_CHANGED == 'true' || env.OLLAMA_CHANGED == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push webapp image
        if: env.WEBAPP_CHANGED == 'true'
        run: |
          echo "Building and pushing webapp image"
          docker build -t $ECR_WEBAPP:latest ./webapp
          docker push $ECR_WEBAPP:latest

      - name: Build and push ollama image
        if: env.OLLAMA_CHANGED == 'true'
        run: |
          echo "Building and pushing ollama image"
          docker build -t $ECR_OLLAMA:latest ./ollama
          docker push $ECR_OLLAMA:latest

      - name: Update ECS task definition and service
        if: env.WEBAPP_CHANGED == 'true' || env.OLLAMA_CHANGED == 'true'
        run: |
          # Ottieni la task definition attuale
          aws ecs describe-task-definition --task-definition $TASK_FAMILY > taskdef.json

          # Aggiorna l’immagine nella task definition solo per i container modificati
          if [ "$WEBAPP_CHANGED" == "true" ]; then
            echo "Updating webapp image in taskdef"
            jq --arg IMAGE "$ECR_WEBAPP:latest" '.taskDefinition.containerDefinitions |= map(if .name=="webapp" then .image=$IMAGE else . end)' taskdef.json > taskdef-updated.json
            mv taskdef-updated.json taskdef.json
          fi

          if [ "$OLLAMA_CHANGED" == "true" ]; then
            echo "Updating ollama image in taskdef"
            jq --arg IMAGE "$ECR_OLLAMA:latest" '.taskDefinition.containerDefinitions |= map(if .name=="ollama" then .image=$IMAGE else . end)' taskdef.json > taskdef-updated.json
            mv taskdef-updated.json taskdef.json
          fi

          # Rimuovi campi non ammessi per register-task-definition
          jq 'del(.taskDefinition.taskDefinitionArn, .taskDefinition.revision, .taskDefinition.status, .taskDefinition.requiresAttributes, .taskDefinition.compatibilities, .taskDefinition.registeredAt, .taskDefinition.registeredBy)' taskdef.json > new-taskdef.json

          # Registra la nuova task definition
          aws ecs register-task-definition --cli-input-json file://new-taskdef.json

          # Aggiorna il servizio ECS per usare la nuova task definition
          NEW_TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' new-taskdef.json)

          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN

          # Attendi che il servizio sia stabile (tutti i nuovi task RUNNING)
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
          echo "✅ ECS service is now stable and all tasks are running."
